package api

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MessageChallenge) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "n":
			err = dc.ReadExactBytes((z.Nonce)[:])
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "t":
			z.UnixTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "UnixTime")
				return
			}
		case "c":
			z.Complexity, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "Complexity")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageChallenge) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "a"
	err = en.Append(0x84, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Nonce)[:])
	if err != nil {
		err = msgp.WrapError(err, "Nonce")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.UnixTime)
	if err != nil {
		err = msgp.WrapError(err, "UnixTime")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.Complexity)
	if err != nil {
		err = msgp.WrapError(err, "Complexity")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageChallenge) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "a"
	o = append(o, 0x84, 0xa1, 0x61)
	o = msgp.AppendString(o, z.Address)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendBytes(o, (z.Nonce)[:])
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendInt64(o, z.UnixTime)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendUint8(o, z.Complexity)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageChallenge) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "n":
			bts, err = msgp.ReadExactBytes(bts, (z.Nonce)[:])
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "t":
			z.UnixTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UnixTime")
				return
			}
		case "c":
			z.Complexity, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Complexity")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageChallenge) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Address) + 2 + msgp.ArrayHeaderSize + (nonceSize * (msgp.ByteSize)) + 2 + msgp.Int64Size + 2 + msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageGrant) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "q":
			z.Quote, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
		case "e":
			z.Error, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessageGrant) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "q"
	err = en.Append(0x82, 0xa1, 0x71)
	if err != nil {
		return
	}
	err = en.WriteString(z.Quote)
	if err != nil {
		err = msgp.WrapError(err, "Quote")
		return
	}
	// write "e"
	err = en.Append(0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessageGrant) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "q"
	o = append(o, 0x82, 0xa1, 0x71)
	o = msgp.AppendString(o, z.Quote)
	// string "e"
	o = append(o, 0xa1, 0x65)
	o = msgp.AppendString(o, z.Error)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageGrant) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "q":
			z.Quote, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
		case "e":
			z.Error, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessageGrant) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Quote) + 2 + msgp.StringPrefixSize + len(z.Error)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MessageChallenge":
			err = z.MessageChallenge.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "MessageChallenge")
				return
			}
		case "s":
			z.Solution, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Solution")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "MessageChallenge"
	err = en.Append(0x82, 0xb0, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65)
	if err != nil {
		return
	}
	err = z.MessageChallenge.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "MessageChallenge")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Solution)
	if err != nil {
		err = msgp.WrapError(err, "Solution")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "MessageChallenge"
	o = append(o, 0x82, 0xb0, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65)
	o, err = z.MessageChallenge.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MessageChallenge")
		return
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendUint64(o, z.Solution)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MessageChallenge":
			bts, err = z.MessageChallenge.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MessageChallenge")
				return
			}
		case "s":
			z.Solution, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Solution")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageResponse) Msgsize() (s int) {
	s = 1 + 17 + z.MessageChallenge.Msgsize() + 2 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MessageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MessageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessageType) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Nonce) DecodeMsg(dc *msgp.Reader) (err error) {
	err = dc.ReadExactBytes((z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Nonce) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteBytes((z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Nonce) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, (z)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Nonce) UnmarshalMsg(bts []byte) (o []byte, err error) {
	bts, err = msgp.ReadExactBytes(bts, (z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Nonce) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (nonceSize * (msgp.ByteSize))
	return
}
